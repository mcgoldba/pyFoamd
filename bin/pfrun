#!/bin/bash
#cd ${0%/*} || exit 1    # Run from this directory

echo $PWD

#rm ./log.*
# Abort the script on error
#set -euxo pipefail
set -euo pipefail
#set -e pipefail

# Redirect stdout ( > ) into a named pipe ( >() ) running "tee"
exec >> Log

# Without this, only stdout would be captured - i.e. your
# log file would not contain any error messages.
# SEE (and upvote) the answer by Adam Spiers, which keeps STDERR
# as a separate stream - I did not want to steal from him by simply
# adding his answer to mine.
# exec | 2> /dev/stderr
#exec || (>&2 echo "Command returned an error!"; logHeader "END ON ERROR")

# Find the scripts to call.  Try to locate in case directory, otherwise use default pyFoamd files
for script in Allrun Allmesh AllmeshCf postProcess reconstructMesh
do
    if [ -f "$script" ]; then
        eval "script$script='./$script'"
    else
        eval "script$script='$0/../../bash/$script'"
    fi
done

# Source tutorial run functions
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
. $SCRIPT_DIR/../bash/RunFunctions #Prints log to stdout AND the log.* file
. $WM_PROJECT_DIR/bin/tools/RunFunctions #Prints log to the log.* file only


logHeader "START"

echo "Running command:" $0 $@

runSim=true
runMesh=true
cfMesh=false
improveMesh=false
reconstructSim=false
runCommand=runApplication
restartSim=false
justSolve=false
clearLogs=false
postProcess=false
topoSet=false
forceDecompose=false


searchDir="processor0"
if [ ! -d "$searchDir" ]; then
  decomposed="false"
  echo "The case is not decomposed."
else
  decomposed="true"
  echo "The case is decomposed."
fi

#- Parse command arguments
PARAMS=""

while (( "$#" )) ; do
case "$1" in
#while [[ $# -gt 0 ]]
#do
#    key="$1"
#    case $key in
#for i in "$@"
#do
#case $i in
    -parallel) #run in parallel
        runCommand=runParallel
        shift
        ;;
    -meshOnly) #run meshing commands only
        runSim=false
        shift
        ;;
    -cfMesh) #use cfMesh library for meshing instead of snappyHexMesh
        cfMesh=true
        nImproveCycles=$2
        shift 2
        ;;
    -improveMesh) #just run the improveMeshQuality application
        improveMesh=true
        shift
        ;;
    -reconstruct) #reconstruct the simulation after completion
        reconstructSim=true
        shift
        ;;
    -restart) #restart an existing simulation
        restartSim=true
        runMesh=false
        shift
        ;;
    -decomposed) #restart a case from a decomposed state
        decomposed=true
        runMesh=false
        shift
        ;;
    -forceDecompose) #run decomposePar with the '-force' option
        forceDecompose=true
        shift
        ;;
    -noMesh) #run without meshing
        runMesh=false
        shift
        ;;
    -justSolve) #run the solver and nothing else
        justSolve=true
        shift
        ;;
    -clearLogs) # delete all of the existing 'log.*' files
        clearLogs=true
        shift
        ;;
    -postProcess) # run the "postProcess" commands
        postProcess=true
        shift
        ;;
    -justPostProcess) # run the "postProcess" commands, and do nothing else
        postProcess=true
        justSolve=false
        runMesh=false
        runSim=false
        reconstructSim=false
        shift
        ;;
    -withTopoSet)
        topoSet=true
        shift
        ;;
    -*|--*)
        echo "Invalid option $OPTARG" 1>&2
        exit 1
        ;;
    *)
        PARAMS="$PARAMS $1"
        shift
        ;;
esac
done
#shift $((OPTIND -1))

eval set -- "$PARAMS"

if [ "$clearLogs" = true ]
then
    rm log.*
fi


NPROCS=getNumberOfProcessors

export NPROCS
{

if [ "$improveMesh" = true ]
then

  $runCommand improveMeshQuality

elif [ "$justSolve" = true ]
then

  if [ "$runCommand" = "runParallel" ] && [ "$decomposed" = false ];
  then
      runApplication decomposePar
  fi

  $runCommand $(getApplication)

else
    if [ "$runMesh" = true ]
    then
        if [ "$cfMesh" = true ]
        then
            . $scrptAllmeshCf $PWD
        else
            . $scriptAllmesh $PWD
        fi
    fi

    if [ "$runSim" = true ]
    then
        . runScript $scriptAllrun
    fi

    if [ "$reconstructSim" = true ]
    then
        . $scriptreconstructMesh $PWD
    fi

    if [ "$postProcess" = true ]
    then
        . $scriptpostProcess $PWD
    fi
fi

}
#runApplication reconstructParMesh -mergeTol 1E-06 -constant
#runApplication reconstructPar -latestTime -withZero
#rm -rf ./processor*
#
#runApplication -a decomposePar -copyZero -force
#
#rm log.potentialFoam
#$runCommand potentialFoam
#
#rm log.$(getApplication)
#$runCommand $(getApplication)
#
#if [  ];
#then
#  if [[ $runCommand == "runParallel" && reconstructSim == true ]];
#  then
#    runApplication reconstructParMesh -mergeTol 1E-06 -constant
#
#    runApplication reconstructPar -constant
#  fi
#fi

logHeader "END"
#------------------------------------------------------------------------------
